---
title: "Project 1"
author: "Isaac"
format: html
editor: visual
---

## Querying Census API

The goal of this project is to query the "Public Use Microdata Sample" (PUMS) API from the Census Bureau. We do this by first building the URL to contact a particular endpoint of the PUMS API. In particular, we will go with the example call provided in the PUMS API under their most recent year, 2022, which we store as a string.

```{r}
URL_pums <- "https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24"
```

Next we use the `httr::GET()` function to contact the website and explore its structure.

```{r}
pums_info <- httr::GET(URL_pums)
str(pums_info, max.level = 1)
```

This is a lot of information and not very clear or readable, so we will use the `jsonlite` package to parse this data.

```{r}
library(jsonlite)
library(tibble)

#parse data using rawToChar() function 
parsed <- fromJSON(rawToChar(pums_info$content))

#turn parsed data into nice tibble
acs_estimates_info <- as_tibble(parsed)

acs_estimates_info
```

This is not quite what we want because the column names are "V1", "V2", "V3", "V4", default names, and the first row of observations are "SEX", "PWGTP", "MAR", "SCHL", are *what should be* the columns names. The following code will fix this:

```{r}
row_length <- nrow(acs_estimates_info)

acs_estimates_info_updated <- tibble("SEX" = acs_estimates_info$V1[2:row_length], "PWGTP" = acs_estimates_info$V2[2:row_length], "MAR" = acs_estimates_info$V3[2:row_length], "SCHL" = acs_estimates_info$V4[2:row_length])

acs_estimates_info_updated
```

#### Automating the Process Above

Next we want to automate things. First we define a helper function which will take in a URL that accesses data from the PUMS API, and returns as output a nicely formatted tibble. Note that in the PUMS API, the data is always formatted with the first row consisting of the variable names, so we will need to take this into account for our helper function!

```{r}
url_to_tibble <- function(url = NULL) {
    #us url to access data
    raw_data <- httr::GET(url)
    
    #data is given as a JSON file, so we need to parse it with rawToChar
    #then format it as a tibble
    parsed_data <- fromJSON(rawToChar(raw_data$content))
    base_tib <- as_tibble(parsed_data)
    
    m <- nrow(base_tib)
    n <- ncol(base_tib)
    
    #need to change column names of base_tib so that it matches the first row
    for (i in 1:n) {
      colnames(base_tib)[i] <- base_tib[[1,i]]
    }
    
    #now get rid of first row since they are not valid observations
    updated_tib <- base_tib[2:m, ]
    
    return (updated_tib)
}

url_to_tibble("https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24")
```

This works. Now we want to define a function that will query the PUMS API and allows the user to specify:

1.  year of survey (with 2022 being the default year)
    -   need to verify that the value given is between 2010 and 2022
2.  the numeric variables to be returned (with AGEP and PWGTP as default, and PWGTP always being returned)
    -   options for the user should be AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP

    -   function needs to turn variables into numeric values or time values where appropriate and check that the variables asked for are in the above set

    -   one numeric variable other than PWGTP must also be returned
3.  the categorical variables to be returned (with SEX as default)
    -   options for the user should be FER, HHL, HISPEED, JWAP, JWDP, JWTRNS, SCH, SCHL, and SEX

    -   function needs to turn variables into factors with appropriate levels, where appropriate, and also check that the variables asked for are in the above set

    -   one categorical variable must be returned
4.  geography level (i.e. All, Region, Division, or STATE, with ALL as default)
    -   function needs to check that the value specified by the user is in the set above
5.  an optional argument to subset the data
    -   user should be able to specify specific Regions, Divisions, or STATES for this part (and only those specified geography levels would be returned)

Here is an attempt....

```{r}
pums_url_builder <- function(year = 2022, num_vars = c("AGEP", "PWGTP"),
                             cat_vars = c("SEX"), geo_lev = "All") {
  
  #verify user input is valid
  if (!(year %in% c(2010:2022))) {
    stop("Year must be between 2010 and 2022!")
  }
  else if (!all(is.element(num_vars, list("AGEP", "PWGTP", "GASP", "GRPIP", 
                                          "JWAP", "JWDP", "JWNMP")))) {
    stop("Numeric variables must be within the set {AGEP, PWGTP, GASP, GRPIP, 
         JWAP, JWDP, JWNMP}, and furthermore PWGTP must also be included.")
    if (!(is.element("PWGTP", num_vars))) {
      stop("PWGTP must always be included!")
    }
  }
  else if (!all(is.element(cat_vars, list("FER", "HHL", "HISPEED", "JWAP", 
                                          "JWDP", "JWTRNS", "SCH", "SCHL", "SEX"
                                          )))) {
    stop("Categorical variables must be within the set {FER, HHL, HISPEED, JWAP,
         JWDP, JWTRNS, SCH, SCHL, SEX} and cannot be empty.")
    if (length(cat_vars) == 0) {
      stop("At least one categorical variable must be returned!")
    }
  }
  else if (!all(is.element(geo_lev, list("All", "Region", "Division", "STATE"
                                         )))) {
    stop("Geography level must be within the set {All, Region, Division, State}
         .")
  }
  
  #base url: contains year only
  base_url <- paste0("https://api.census.gov/data/year/acs/acs1/pums?get=", 
                     as.character(year))
  
  #concatenate base url with other arguments chosen by user
  updated_url <- cat(base_url, num_vars, cat_vars, geo_lev, sep=",")

  return(updated_url)
}
pums_url_builder()
```
