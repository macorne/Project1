---
title: "Project1"
name:  "Matt and Isaac"
date:  "10-02-24"
format: html
editor: visual
---

## Task 1

Build the URL as in the notes, then use GET from the httr package.

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library("tidyverse")
library("tidycensus")
library("jsonlite")

#Example API call
#api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY

#Don't use, but gives some information that could be useful for later development
#ex_URL <- "https://api.census.gov/data/2022/acs/acs1/pums/variables.json"

#Convert URL to tibble

url_to_tibble <- function(url = NULL) {
    raw_data <- httr::GET(url)
    parsed_data <- fromJSON(rawToChar(raw_data$content))
    return (tibble(parsed_data))
}

url_to_tibble("https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24")

```

Build a URL.  Start with a toy model.

```{r}
load_data_toy <- function(year=2022,chr_vars=c("SEX"),num_vars=c("AGEP","PWGTP")){
  if (year %in% -c(2010:2022)){
    stop("Select a year from 2010 through 2022")
  }
  base <- paste("https://api.census.gov/data", as.character(year), "acs", "acs1", "pums?", sep = "/")
#  return(base)
  
  if (SEX %in% -c(1,2)){
    stop("Select 1 or 2 for SEX")
  }
  if (AGEP %in% -c(1:99)){
    stop("Select a value from 1 through 99 for AGEP")
  }
  if (PWGTP %in% -c(1:9999)){
    stop("Select a value from 1 through 9999 for PWGTP")
  }
  base <- paste0(base, "get=", "SEX")
  URL <- paste(base, "AGEP", "PWGTP", sep = ",")
  return(URL)
#  raw_data <- httr::GET(URL)
#  parsed_data <- fromJSON(rawToChar(raw_data$content))
#  return (tibble(parsed_data))
}

load_data_toy()
```

The `echo: false` option disables the printing of code (only output is displayed).



```{r}
#https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24

pums_url_builder <- function(year = 2022, num_vars = c("AGEP", "PWGTP"),
                             cat_vars = c("SEX"), geo_lev = "All") {
  
  #verify user input is valid
  if (!(year %in% c(2010:2022))) {
    stop("Year must be between 2010 and 2022!")
  }
  else if (!all(is.element(num_vars, list("AGEP", "PWGTP", "GASP", "GRPIP", 
                                          "JWAP", "JWDP", "JWNMP")))) {
    stop("Numeric variables must be within the set {AGEP, PWGTP, GASP, GRPIP, 
         JWAP, JWDP, JWNMP}, and furthermore PWGTP must also be included.")
    if (!(is.element("PWGTP", num_vars))) {
      stop("PWGTP must always be included!")
    }
  }
  else if (!all(is.element(cat_vars, list("FER", "HHL", "HISPEED", "JWAP", 
                                          "JWDP", "JWTRNS", "SCH", "SCHL", "SEX"
                                          )))) {
    stop("Categorical variables must be within the set {FER, HHL, HISPEED, JWAP,
         JWDP, JWTRNS, SCH, SCHL, SEX} and cannot be empty.")
    if (length(cat_vars) == 0) {
      stop("At least one categorical variable must be returned!")
    }
  }
  else if (!all(is.element(geo_lev, list("All", "Region", "Division", "STATE"
                                         )))) {
    stop("Geography level must be within the set {All, Region, Division, State}
         .")
  }
  
  #base url: contains year only
  base_url <- paste0("https://api.census.gov/data/year/acs/acs1/pums?get=", 
                     as.character(year))
  
  #concatenate base url with other arguments chosen by user
  for (i in 1:length(cat_vars)){
    updated_url <- paste(base_url, cat_vars[i], sep=",")
  }
  for (j in 1:length(num_vars)){
    updated_url <- paste(updated_url, num_vars[j], sep=",")
  }
  updated_url <- paste(updated_url, geo_lev, sep=",")

  return(updated_url)
}
pums_url_builder()
```

