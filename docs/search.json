[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "Build the URL as in the notes, then use GET from the httr package.\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(\"tidycensus\")\nlibrary(\"jsonlite\")\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n#Example API call\n#api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY\n\n#Don't use, but gives some information that could be useful for later development\n#ex_URL &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums/variables.json\"\n\n#Convert URL to tibble\n\nurl_to_tibble &lt;- function(url = NULL) {\n    raw_data &lt;- httr::GET(url)\n    parsed_data &lt;- fromJSON(rawToChar(raw_data$content))\n    return (tibble(parsed_data))\n}\n\nurl_to_tibble(\"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24\")\n\n# A tibble: 44,080 × 1\n   parsed_data[,1] [,2]  [,3]  [,4] \n   &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 SEX             PWGTP MAR   SCHL \n 2 2               6     5     24   \n 3 2               23    2     24   \n 4 1               23    3     24   \n 5 1               80    5     24   \n 6 1               16    1     24   \n 7 1               107   3     24   \n 8 2               10    5     24   \n 9 1               22    1     24   \n10 2               127   5     24   \n# ℹ 44,070 more rows\n\n\nBuild a URL. Start with a toy model.\n\nload_data_toy &lt;- function(year=2022,SEX=2,AGEP=1,PWGTP=1){\n  if (year %in% -c(2010:2022)){\n    stop(\"Select a year from 2010 through 2022\")\n  }\n  base &lt;- paste(\"https://api.census.gov/data\", as.character(year), \"acs\", \"acs1\", \"pums?\", sep = \"/\")\n#  return(base)\n  if (SEX %in% -c(1,2)){\n    stop(\"Select 1 or 2 for SEX\")\n  }\n  if (AGEP %in% -c(1:99)){\n    stop(\"Select a value from 1 through 99 for AGEP\")\n  }\n  if (PWGTP %in% -c(1:9999)){\n    stop(\"Select a value from 1 through 9999 for PWGTP\")\n  }\n  base &lt;- paste0(base, \"get=\", \"SEX\")\n  URL &lt;- paste(base, \"AGEP\", \"PWGTP\", sep = \",\")\n  return(URL)\n#  raw_data &lt;- httr::GET(URL)\n#  parsed_data &lt;- fromJSON(rawToChar(raw_data$content))\n#  return (tibble(parsed_data))\n}\n\nload_data_toy()\n\n[1] \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,AGEP,PWGTP\"\n\n\nThe echo: false option disables the printing of code (only output is displayed).\n\n#https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24\n\npums_url_builder &lt;- function(year = 2022, num_vars = c(\"AGEP\", \"PWGTP\"),\n                             cat_vars = c(\"SEX\"), geo_lev = \"All\") {\n  \n  #verify user input is valid\n  if (!(year %in% c(2010:2022))) {\n    stop(\"Year must be between 2010 and 2022!\")\n  }\n  else if (!all(is.element(num_vars, list(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \n                                          \"JWAP\", \"JWDP\", \"JWNMP\")))) {\n    stop(\"Numeric variables must be within the set {AGEP, PWGTP, GASP, GRPIP, \n         JWAP, JWDP, JWNMP}, and furthermore PWGTP must also be included.\")\n    if (!(is.element(\"PWGTP\", num_vars))) {\n      stop(\"PWGTP must always be included!\")\n    }\n  }\n  else if (!all(is.element(cat_vars, list(\"FER\", \"HHL\", \"HISPEED\", \"JWAP\", \n                                          \"JWDP\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\"\n                                          )))) {\n    stop(\"Categorical variables must be within the set {FER, HHL, HISPEED, JWAP,\n         JWDP, JWTRNS, SCH, SCHL, SEX} and cannot be empty.\")\n    if (length(cat_vars) == 0) {\n      stop(\"At least one categorical variable must be returned!\")\n    }\n  }\n  else if (!all(is.element(geo_lev, list(\"All\", \"Region\", \"Division\", \"STATE\"\n                                         )))) {\n    stop(\"Geography level must be within the set {All, Region, Division, State}\n         .\")\n  }\n  \n  #base url: contains year only\n  base_url &lt;- paste0(\"https://api.census.gov/data/year/acs/acs1/pums?get=\", \n                     as.character(year))\n  \n  #concatenate base url with other arguments chosen by user\n  updated_url &lt;- cat(base_url, num_vars, cat_vars, geo_lev, sep=\",\")\n\n  return(updated_url)\n}\n#pums_url_builder()"
  },
  {
    "objectID": "Project1.html#task-1",
    "href": "Project1.html#task-1",
    "title": "Project1",
    "section": "",
    "text": "Build the URL as in the notes, then use GET from the httr package.\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(\"tidycensus\")\nlibrary(\"jsonlite\")\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n#Example API call\n#api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY\n\n#Don't use, but gives some information that could be useful for later development\n#ex_URL &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums/variables.json\"\n\n#Convert URL to tibble\n\nurl_to_tibble &lt;- function(url = NULL) {\n    raw_data &lt;- httr::GET(url)\n    parsed_data &lt;- fromJSON(rawToChar(raw_data$content))\n    return (tibble(parsed_data))\n}\n\nurl_to_tibble(\"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24\")\n\n# A tibble: 44,080 × 1\n   parsed_data[,1] [,2]  [,3]  [,4] \n   &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 SEX             PWGTP MAR   SCHL \n 2 2               6     5     24   \n 3 2               23    2     24   \n 4 1               23    3     24   \n 5 1               80    5     24   \n 6 1               16    1     24   \n 7 1               107   3     24   \n 8 2               10    5     24   \n 9 1               22    1     24   \n10 2               127   5     24   \n# ℹ 44,070 more rows\n\n\nBuild a URL. Start with a toy model.\n\nload_data_toy &lt;- function(year=2022,SEX=2,AGEP=1,PWGTP=1){\n  if (year %in% -c(2010:2022)){\n    stop(\"Select a year from 2010 through 2022\")\n  }\n  base &lt;- paste(\"https://api.census.gov/data\", as.character(year), \"acs\", \"acs1\", \"pums?\", sep = \"/\")\n#  return(base)\n  if (SEX %in% -c(1,2)){\n    stop(\"Select 1 or 2 for SEX\")\n  }\n  if (AGEP %in% -c(1:99)){\n    stop(\"Select a value from 1 through 99 for AGEP\")\n  }\n  if (PWGTP %in% -c(1:9999)){\n    stop(\"Select a value from 1 through 9999 for PWGTP\")\n  }\n  base &lt;- paste0(base, \"get=\", \"SEX\")\n  URL &lt;- paste(base, \"AGEP\", \"PWGTP\", sep = \",\")\n  return(URL)\n#  raw_data &lt;- httr::GET(URL)\n#  parsed_data &lt;- fromJSON(rawToChar(raw_data$content))\n#  return (tibble(parsed_data))\n}\n\nload_data_toy()\n\n[1] \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,AGEP,PWGTP\"\n\n\nThe echo: false option disables the printing of code (only output is displayed).\n\n#https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24\n\npums_url_builder &lt;- function(year = 2022, num_vars = c(\"AGEP\", \"PWGTP\"),\n                             cat_vars = c(\"SEX\"), geo_lev = \"All\") {\n  \n  #verify user input is valid\n  if (!(year %in% c(2010:2022))) {\n    stop(\"Year must be between 2010 and 2022!\")\n  }\n  else if (!all(is.element(num_vars, list(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \n                                          \"JWAP\", \"JWDP\", \"JWNMP\")))) {\n    stop(\"Numeric variables must be within the set {AGEP, PWGTP, GASP, GRPIP, \n         JWAP, JWDP, JWNMP}, and furthermore PWGTP must also be included.\")\n    if (!(is.element(\"PWGTP\", num_vars))) {\n      stop(\"PWGTP must always be included!\")\n    }\n  }\n  else if (!all(is.element(cat_vars, list(\"FER\", \"HHL\", \"HISPEED\", \"JWAP\", \n                                          \"JWDP\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\"\n                                          )))) {\n    stop(\"Categorical variables must be within the set {FER, HHL, HISPEED, JWAP,\n         JWDP, JWTRNS, SCH, SCHL, SEX} and cannot be empty.\")\n    if (length(cat_vars) == 0) {\n      stop(\"At least one categorical variable must be returned!\")\n    }\n  }\n  else if (!all(is.element(geo_lev, list(\"All\", \"Region\", \"Division\", \"STATE\"\n                                         )))) {\n    stop(\"Geography level must be within the set {All, Region, Division, State}\n         .\")\n  }\n  \n  #base url: contains year only\n  base_url &lt;- paste0(\"https://api.census.gov/data/year/acs/acs1/pums?get=\", \n                     as.character(year))\n  \n  #concatenate base url with other arguments chosen by user\n  updated_url &lt;- cat(base_url, num_vars, cat_vars, geo_lev, sep=\",\")\n\n  return(updated_url)\n}\n#pums_url_builder()"
  }
]